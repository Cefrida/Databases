{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "5d2e3a3d-5c92-4607-8529-f0a636cc0bdc",
   "metadata": {
    "tags": []
   },
   "source": [
    "## Midterm\n",
    "### Due Friday, October 27 by midnight\n",
    "\n",
    "This midterm uses the 'nyc_health.db'.\n",
    "\n",
    "Questions are worth 10 points each. You'll get an additional 10 points just for making the submission!\n",
    "\n",
    "Tips:\n",
    "- Work slow; tackle the queries one small piece at a time\n",
    "- Remember to include the code to create any views you use\n",
    "- Make sure your tables and their column names are the same as we used in class (i.e., your CREATE TABLE statements should be identical to what we wrote in class). You can name calculated fields whatever you want.\n",
    "- Double and triple check your .data302 file before submitting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "80b20adc-4c81-41f6-9b39-28b7f6ada5f9",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import db\n",
    "import pandas as pd\n",
    "import sqlite3\n",
    "\n",
    "# You'll find this library on blackboard\n",
    "import dbga\n",
    "\n",
    "#python libaries specific to making your submission file\n",
    "from collections import defaultdict as dd\n",
    "import json"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "d95c3db3-ec5f-4e61-ab94-961cce985da8",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'1.0.3'"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dbga.__version__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "4b1afa86-d713-4907-896b-0696a997731d",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "my_sql = dd(dict)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "1d22353b-6585-48d5-ac91-545ae1a54519",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "my_sql['setup'] = []"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "a224d0cb-6f1e-48a2-b132-3e59ee4dbb49",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "path_to_db = '../databases/nyc_health.db'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "588fe83c-5fa9-42e3-9683-d56449b6ae36",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "conn = sqlite3.connect(path_to_db)\n",
    "curs = conn.cursor()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "bd2a3a63-f446-4821-86a8-0441c12e7d63",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>foreign_keys</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   foreign_keys\n",
       "0             1"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "curs.execute(\"PRAGMA foreign_keys = ON;\")\n",
    "pd.read_sql(\"PRAGMA foreign_keys;\", conn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f9a352d9-7145-40ac-a60d-e8031f6fdd64",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "98f2b3da-a3d5-4c55-a7c3-382d4d23bd81",
   "metadata": {},
   "source": [
    "---\n",
    "1) Get a list of all restaurants (by camis) who have been cited for a violation containing the words 'vermin', 'mice', or 'rats'.\n",
    "\n",
    "Have your query return the following columns:\n",
    "- camis\n",
    "- dba\n",
    "- viol_id\n",
    "- viol_desc\n",
    "- A count of the number of times they have been cited for each violation\n",
    "\n",
    "Order the results with the most violations on top."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "4119e4fb-9f7a-483c-8637-63c646323102",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>camis</th>\n",
       "      <th>dba</th>\n",
       "      <th>viol_id</th>\n",
       "      <th>viol_desc</th>\n",
       "      <th>A count of the number of times they have been cited for each violation</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>40861669</td>\n",
       "      <td>NEW VICTORY RESTAURANT</td>\n",
       "      <td>08A</td>\n",
       "      <td>Facility not vermin proof. Harborage or condit...</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>41430594</td>\n",
       "      <td>1 STOP PATTY SHOP</td>\n",
       "      <td>04L</td>\n",
       "      <td>Evidence of mice or live mice present in facil...</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>50033122</td>\n",
       "      <td>PARTY WELL REST &amp; ORIENTAL BAKERY</td>\n",
       "      <td>08A</td>\n",
       "      <td>Facility not vermin proof. Harborage or condit...</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>40861669</td>\n",
       "      <td>NEW VICTORY RESTAURANT</td>\n",
       "      <td>04L</td>\n",
       "      <td>Evidence of mice or live mice present in facil...</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>41309387</td>\n",
       "      <td>NEW TACO EXPRESS</td>\n",
       "      <td>04L</td>\n",
       "      <td>Evidence of mice or live mice present in facil...</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29033</th>\n",
       "      <td>50068060</td>\n",
       "      <td>TASTE OF PUNJAB</td>\n",
       "      <td>08A</td>\n",
       "      <td>Facility not vermin proof. Harborage or condit...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29034</th>\n",
       "      <td>50068098</td>\n",
       "      <td>SUBWAY</td>\n",
       "      <td>08A</td>\n",
       "      <td>Facility not vermin proof. Harborage or condit...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29035</th>\n",
       "      <td>50068305</td>\n",
       "      <td>SONRISA AZUL</td>\n",
       "      <td>08A</td>\n",
       "      <td>Facility not vermin proof. Harborage or condit...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29036</th>\n",
       "      <td>50068537</td>\n",
       "      <td>JOE &amp; THE JUICE COLOMBUS</td>\n",
       "      <td>04L</td>\n",
       "      <td>Evidence of mice or live mice present in facil...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29037</th>\n",
       "      <td>50068537</td>\n",
       "      <td>JOE &amp; THE JUICE COLOMBUS</td>\n",
       "      <td>08A</td>\n",
       "      <td>Facility not vermin proof. Harborage or condit...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>29038 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          camis                                dba viol_id  \\\n",
       "0      40861669             NEW VICTORY RESTAURANT     08A   \n",
       "1      41430594                  1 STOP PATTY SHOP     04L   \n",
       "2      50033122  PARTY WELL REST & ORIENTAL BAKERY     08A   \n",
       "3      40861669             NEW VICTORY RESTAURANT     04L   \n",
       "4      41309387                   NEW TACO EXPRESS     04L   \n",
       "...         ...                                ...     ...   \n",
       "29033  50068060                    TASTE OF PUNJAB     08A   \n",
       "29034  50068098                             SUBWAY     08A   \n",
       "29035  50068305                       SONRISA AZUL     08A   \n",
       "29036  50068537           JOE & THE JUICE COLOMBUS     04L   \n",
       "29037  50068537           JOE & THE JUICE COLOMBUS     08A   \n",
       "\n",
       "                                               viol_desc  \\\n",
       "0      Facility not vermin proof. Harborage or condit...   \n",
       "1      Evidence of mice or live mice present in facil...   \n",
       "2      Facility not vermin proof. Harborage or condit...   \n",
       "3      Evidence of mice or live mice present in facil...   \n",
       "4      Evidence of mice or live mice present in facil...   \n",
       "...                                                  ...   \n",
       "29033  Facility not vermin proof. Harborage or condit...   \n",
       "29034  Facility not vermin proof. Harborage or condit...   \n",
       "29035  Facility not vermin proof. Harborage or condit...   \n",
       "29036  Evidence of mice or live mice present in facil...   \n",
       "29037  Facility not vermin proof. Harborage or condit...   \n",
       "\n",
       "       A count of the number of times they have been cited for each violation  \n",
       "0                                                     15                       \n",
       "1                                                     14                       \n",
       "2                                                     14                       \n",
       "3                                                     13                       \n",
       "4                                                     13                       \n",
       "...                                                  ...                       \n",
       "29033                                                  1                       \n",
       "29034                                                  1                       \n",
       "29035                                                  1                       \n",
       "29036                                                  1                       \n",
       "29037                                                  1                       \n",
       "\n",
       "[29038 rows x 5 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sql1 = '''\n",
    "SELECT \"camis\",\"dba\",\"viol_id\",\"viol_desc\", count(*) as \"A count of the number of times they have been cited for each violation\" \n",
    "FROM tRest\n",
    "JOIN tInsp USING(camis)\n",
    "JOIN tViol USING(viol_id)\n",
    "WHERE \"viol_desc\" LIKE '%vermin%'\n",
    "    OR \"viol_desc\" LIKE '%mice%'\n",
    "    OR \"viol_desc\" LIKE '%rats%'\n",
    "GROUP BY \"camis\",\"dba\",\"viol_id\",\"viol_desc\"\n",
    "ORDER BY \"A count of the number of times they have been cited for each violation\" DESC\n",
    ";'''\n",
    "\n",
    "pd.read_sql(sql1, conn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "e7dda5b4-ad61-4c57-a0ac-06e585f4ffd7",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "my_sql['q1']['sql'] = sql1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "be591e0b-bd46-4728-90c4-a893b3eb284d",
   "metadata": {},
   "source": [
    "---\n",
    "2) For each different cuisine type, determine the most commonly cited violation **excluding viol_id 10F** (this is by far the most common violation, and not very \"gross\").\n",
    "\n",
    "Have your query return:\n",
    "\n",
    "- cuisine\n",
    "- viol_id\n",
    "- viol_desc\n",
    "- Number of violations for their most common violation (except 10F)\n",
    "\n",
    "Limit those results to cuisine types where the max number of violations is greater than 1000.\n",
    "\n",
    "Order the results in ascending order by the cuisine type."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "caa8b256-f733-43a5-8472-990de0cb362e",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>camis</th>\n",
       "      <th>cuisine</th>\n",
       "      <th>viol_id</th>\n",
       "      <th>viol_desc</th>\n",
       "      <th>Number of violations for their most common violation (except 10F)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [camis, cuisine, viol_id, viol_desc, Number of violations for their most common violation (except 10F)]\n",
       "Index: []"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sql2 = '''\n",
    "WITH not_10F AS \n",
    "(\n",
    "    SELECT cuisine, viol_id, COUNT(*) as \"Number of violations for their most common violation (except 10F)\"\n",
    "    FROM tRest\n",
    "    JOIN tInsp USING(camis)\n",
    "    WHERE viol_id <> '10F'\n",
    "    GROUP BY cuisine, viol_id\n",
    "),\n",
    "rank_viol AS \n",
    "(\n",
    "    SELECT cuisine, viol_id, viol_desc, \"Number of violations for their most common violation (except 10F)\",\n",
    "        ROW_NUMBER() OVER (PARTITION BY cuisine ORDER BY \"Number of violations for their most common violation (except 10F)\" DESC) as rn\n",
    "    FROM not_10F\n",
    "    JOIN tViol USING(viol_id)\n",
    ")\n",
    "SELECT cuisine, viol_id, viol_desc, \"Number of violations for their most common violation (except 10F)\"\n",
    "FROM rank_viol\n",
    "WHERE rn = 1\n",
    "GROUP BY cuisine\n",
    "HAVING \"Number of violations for their most common violation (except 10F)\" > 1000\n",
    "ORDER BY cuisine ASC\n",
    "\n",
    ";'''\n",
    "pd.read_sql(sql2, conn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "008ad0d4-2fd8-4e33-a621-e7c68fe0f5c9",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "my_sql['q2']['sql'] = sql2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0816ae2e-5ba5-4d46-a34d-426d499a6380",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "3) When the action description contains the word 'closed', what are the top 5 associated violations?\n",
    "\n",
    "\n",
    "Have your query return:\n",
    "\n",
    "- action_desc\n",
    "- viol_desc\n",
    "- total number of violations\n",
    "\n",
    "Order the results with the largest number of violations on top"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "541dd403-3a8e-42bd-9faf-4f70c65eadea",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>action_desc</th>\n",
       "      <th>viol_desc</th>\n",
       "      <th>total number of violations</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Establishment Closed by DOHMH.  Violations wer...</td>\n",
       "      <td>Facility not vermin proof. Harborage or condit...</td>\n",
       "      <td>1419</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Establishment Closed by DOHMH.  Violations wer...</td>\n",
       "      <td>Evidence of mice or live mice present in facil...</td>\n",
       "      <td>973</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Establishment Closed by DOHMH.  Violations wer...</td>\n",
       "      <td>Cold food item held above 41Ã‚Âº F (smoked fish ...</td>\n",
       "      <td>679</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Establishment Closed by DOHMH.  Violations wer...</td>\n",
       "      <td>Live roaches present in facility's food and/or...</td>\n",
       "      <td>615</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Establishment Closed by DOHMH.  Violations wer...</td>\n",
       "      <td>Non-food contact surface improperly constructe...</td>\n",
       "      <td>562</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                         action_desc  \\\n",
       "0  Establishment Closed by DOHMH.  Violations wer...   \n",
       "1  Establishment Closed by DOHMH.  Violations wer...   \n",
       "2  Establishment Closed by DOHMH.  Violations wer...   \n",
       "3  Establishment Closed by DOHMH.  Violations wer...   \n",
       "4  Establishment Closed by DOHMH.  Violations wer...   \n",
       "\n",
       "                                           viol_desc  \\\n",
       "0  Facility not vermin proof. Harborage or condit...   \n",
       "1  Evidence of mice or live mice present in facil...   \n",
       "2  Cold food item held above 41Ã‚Âº F (smoked fish ...   \n",
       "3  Live roaches present in facility's food and/or...   \n",
       "4  Non-food contact surface improperly constructe...   \n",
       "\n",
       "   total number of violations  \n",
       "0                        1419  \n",
       "1                         973  \n",
       "2                         679  \n",
       "3                         615  \n",
       "4                         562  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sql3 = '''\n",
    "SELECT \"action_desc\",\"viol_desc\", COUNT(*) AS \"total number of violations\"\n",
    "FROM tRest\n",
    "    JOIN tInsp USING(camis)\n",
    "    JOIN tAction USING(action_id)\n",
    "    JOIN tViol USING(viol_id)\n",
    "WHERE LOWER(action_desc) LIKE '%closed%'\n",
    "GROUP BY action_desc, viol_desc\n",
    "ORDER BY \"total number of violations\" DESC\n",
    "LIMIT 5\n",
    ";'''\n",
    "pd.read_sql(sql3, conn)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "a03acebc-fd5f-41aa-85fa-ef855cf43893",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "my_sql['q3']['sql'] = sql3 "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "84ef5507-101a-42d3-ad3d-d796cf9b1baa",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "4) Determine which restaurant has been closed the most (action description contains 'closed').\n",
    "\n",
    "For that camis, have your query return:\n",
    "\n",
    "- camis\n",
    "- dba\n",
    "- viol_desc\n",
    "- total number of violations per violation type\n",
    "\n",
    "Include all violations for that camis (not just the ones they were closed for)\n",
    "\n",
    "Order the results with the most common violation on top"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "c94498c8-b22a-48bd-9f31-f703b848846f",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>camis</th>\n",
       "      <th>dba</th>\n",
       "      <th>viol_desc</th>\n",
       "      <th>NumViol</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>40922818</td>\n",
       "      <td>EL TAPATIO MEXICAN RESTAURANT</td>\n",
       "      <td>Non-food contact surface improperly constructe...</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>40922818</td>\n",
       "      <td>EL TAPATIO MEXICAN RESTAURANT</td>\n",
       "      <td>Facility not vermin proof. Harborage or condit...</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>40922818</td>\n",
       "      <td>EL TAPATIO MEXICAN RESTAURANT</td>\n",
       "      <td>Live roaches present in facility's food and/or...</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>40922818</td>\n",
       "      <td>EL TAPATIO MEXICAN RESTAURANT</td>\n",
       "      <td>Evidence of rats or live rats present in facil...</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>40922818</td>\n",
       "      <td>EL TAPATIO MEXICAN RESTAURANT</td>\n",
       "      <td>Plumbing not properly installed or maintained;...</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>40922818</td>\n",
       "      <td>EL TAPATIO MEXICAN RESTAURANT</td>\n",
       "      <td>Cold food item held above 41Ã‚Âº F (smoked fish ...</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>40922818</td>\n",
       "      <td>EL TAPATIO MEXICAN RESTAURANT</td>\n",
       "      <td>Failure to comply with an Order of the Board o...</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>40922818</td>\n",
       "      <td>EL TAPATIO MEXICAN RESTAURANT</td>\n",
       "      <td>Food Protection Certificate not held by superv...</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>40922818</td>\n",
       "      <td>EL TAPATIO MEXICAN RESTAURANT</td>\n",
       "      <td>Hot food item not held at or above 140Ã‚Âº F.</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>40922818</td>\n",
       "      <td>EL TAPATIO MEXICAN RESTAURANT</td>\n",
       "      <td>The original nutritional fact labels and/or in...</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>40922818</td>\n",
       "      <td>EL TAPATIO MEXICAN RESTAURANT</td>\n",
       "      <td>Filth flies or food/refuse/sewage-associated (...</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>40922818</td>\n",
       "      <td>EL TAPATIO MEXICAN RESTAURANT</td>\n",
       "      <td>Food not protected from potential source of co...</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>40922818</td>\n",
       "      <td>EL TAPATIO MEXICAN RESTAURANT</td>\n",
       "      <td>Personal cleanliness inadequate. Outer garment...</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>40922818</td>\n",
       "      <td>EL TAPATIO MEXICAN RESTAURANT</td>\n",
       "      <td>Food contact surface not properly maintained.</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>40922818</td>\n",
       "      <td>EL TAPATIO MEXICAN RESTAURANT</td>\n",
       "      <td>Food from unapproved or unknown source or home...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>40922818</td>\n",
       "      <td>EL TAPATIO MEXICAN RESTAURANT</td>\n",
       "      <td>Food not cooled by an approved method whereby ...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>40922818</td>\n",
       "      <td>EL TAPATIO MEXICAN RESTAURANT</td>\n",
       "      <td>Insufficient or no refrigerated or hot holding...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>40922818</td>\n",
       "      <td>EL TAPATIO MEXICAN RESTAURANT</td>\n",
       "      <td>Pesticide use not in accordance with label or ...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>40922818</td>\n",
       "      <td>EL TAPATIO MEXICAN RESTAURANT</td>\n",
       "      <td>Sanitized equipment or utensil, including in-u...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>40922818</td>\n",
       "      <td>EL TAPATIO MEXICAN RESTAURANT</td>\n",
       "      <td>Shellfish not from approved source, improperly...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>40922818</td>\n",
       "      <td>EL TAPATIO MEXICAN RESTAURANT</td>\n",
       "      <td>Tobacco use, eating, or drinking from open con...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>40922818</td>\n",
       "      <td>EL TAPATIO MEXICAN RESTAURANT</td>\n",
       "      <td>Wiping cloths soiled or not stored in sanitizi...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       camis                            dba  \\\n",
       "0   40922818  EL TAPATIO MEXICAN RESTAURANT   \n",
       "1   40922818  EL TAPATIO MEXICAN RESTAURANT   \n",
       "2   40922818  EL TAPATIO MEXICAN RESTAURANT   \n",
       "3   40922818  EL TAPATIO MEXICAN RESTAURANT   \n",
       "4   40922818  EL TAPATIO MEXICAN RESTAURANT   \n",
       "5   40922818  EL TAPATIO MEXICAN RESTAURANT   \n",
       "6   40922818  EL TAPATIO MEXICAN RESTAURANT   \n",
       "7   40922818  EL TAPATIO MEXICAN RESTAURANT   \n",
       "8   40922818  EL TAPATIO MEXICAN RESTAURANT   \n",
       "9   40922818  EL TAPATIO MEXICAN RESTAURANT   \n",
       "10  40922818  EL TAPATIO MEXICAN RESTAURANT   \n",
       "11  40922818  EL TAPATIO MEXICAN RESTAURANT   \n",
       "12  40922818  EL TAPATIO MEXICAN RESTAURANT   \n",
       "13  40922818  EL TAPATIO MEXICAN RESTAURANT   \n",
       "14  40922818  EL TAPATIO MEXICAN RESTAURANT   \n",
       "15  40922818  EL TAPATIO MEXICAN RESTAURANT   \n",
       "16  40922818  EL TAPATIO MEXICAN RESTAURANT   \n",
       "17  40922818  EL TAPATIO MEXICAN RESTAURANT   \n",
       "18  40922818  EL TAPATIO MEXICAN RESTAURANT   \n",
       "19  40922818  EL TAPATIO MEXICAN RESTAURANT   \n",
       "20  40922818  EL TAPATIO MEXICAN RESTAURANT   \n",
       "21  40922818  EL TAPATIO MEXICAN RESTAURANT   \n",
       "\n",
       "                                            viol_desc  NumViol  \n",
       "0   Non-food contact surface improperly constructe...        8  \n",
       "1   Facility not vermin proof. Harborage or condit...        7  \n",
       "2   Live roaches present in facility's food and/or...        7  \n",
       "3   Evidence of rats or live rats present in facil...        5  \n",
       "4   Plumbing not properly installed or maintained;...        5  \n",
       "5   Cold food item held above 41Ã‚Âº F (smoked fish ...        4  \n",
       "6   Failure to comply with an Order of the Board o...        3  \n",
       "7   Food Protection Certificate not held by superv...        3  \n",
       "8         Hot food item not held at or above 140Ã‚Âº F.        3  \n",
       "9   The original nutritional fact labels and/or in...        3  \n",
       "10  Filth flies or food/refuse/sewage-associated (...        2  \n",
       "11  Food not protected from potential source of co...        2  \n",
       "12  Personal cleanliness inadequate. Outer garment...        2  \n",
       "13      Food contact surface not properly maintained.        1  \n",
       "14  Food from unapproved or unknown source or home...        1  \n",
       "15  Food not cooled by an approved method whereby ...        1  \n",
       "16  Insufficient or no refrigerated or hot holding...        1  \n",
       "17  Pesticide use not in accordance with label or ...        1  \n",
       "18  Sanitized equipment or utensil, including in-u...        1  \n",
       "19  Shellfish not from approved source, improperly...        1  \n",
       "20  Tobacco use, eating, or drinking from open con...        1  \n",
       "21  Wiping cloths soiled or not stored in sanitizi...        1  "
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sql4 = '''\n",
    "WITH CamiMostViol As \n",
    "(\n",
    "    SELECT camis, action_desc, Count(action_desc) as NumViol\n",
    "    FROM tRest\n",
    "    JOIN tInsp USING(camis)\n",
    "    JOIN tAction USING(action_id)\n",
    "    WHERE action_desc LIKE '%closed%'\n",
    "    GROUP BY camis\n",
    "    ORDER BY NumViol DESC \n",
    "    LIMIT 1\n",
    ")\n",
    "\n",
    "SELECT c.camis, dba, viol_desc, COUNT(*) as NumViol\n",
    "FROM CamiMostViol c\n",
    "JOIN tRest ON c.camis = tRest.camis \n",
    "JOIN tInsp ON c.camis = tInsp.camis\n",
    "JOIN tViol ON tInsp.viol_id = tViol.viol_id\n",
    "GROUP BY c.camis, dba,viol_desc\n",
    "ORDER BY NumViol DESC\n",
    ";'''\n",
    "\n",
    "pd.read_sql(sql4, conn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "fd3d9c27-813a-4894-9c94-f523a2f57a7a",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "my_sql['q4']['sql'] = sql4"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d13bab0e-31ed-4f86-a20d-6b494ff6ea24",
   "metadata": {},
   "source": [
    "COUNT(*) AS \"Number of violations\",---\n",
    "\n",
    "5) Group all restaurants by their DBA, and computer the average number of violations per location.\n",
    "\n",
    "For example, if there were 100 restaurants with the dba \"STARBUCKS\", and they had a total of 123 violations, then the average number of violations per location would be 123/100=1.23.\n",
    "\n",
    "Have your query return:\n",
    "- dba\n",
    "- Number of locations\n",
    "- Number of violations\n",
    "- Avg violations per location\n",
    "\n",
    "Order the results with the largest number of locations on top\n",
    "\n",
    "_Watch out for integer division!_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "83001b50-55fb-4acc-a0bf-bc445aed05c3",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>dba</th>\n",
       "      <th>NumLoc</th>\n",
       "      <th>NumViol</th>\n",
       "      <th>Avg violations per location</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>DUNKIN' DONUTS</td>\n",
       "      <td>410</td>\n",
       "      <td>4247</td>\n",
       "      <td>10.358537</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>SUBWAY</td>\n",
       "      <td>352</td>\n",
       "      <td>3729</td>\n",
       "      <td>10.593750</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>STARBUCKS</td>\n",
       "      <td>281</td>\n",
       "      <td>2130</td>\n",
       "      <td>7.580071</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>MCDONALD'S</td>\n",
       "      <td>206</td>\n",
       "      <td>2778</td>\n",
       "      <td>13.485437</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>DUNKIN' DONUTS, BASKIN ROBBINS</td>\n",
       "      <td>110</td>\n",
       "      <td>1462</td>\n",
       "      <td>13.290909</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20242</th>\n",
       "      <td>$1 PIZZA</td>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "      <td>8.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20243</th>\n",
       "      <td>#1 SABOR LATINO RESTAURANT</td>\n",
       "      <td>1</td>\n",
       "      <td>55</td>\n",
       "      <td>55.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20244</th>\n",
       "      <td>#1 Natural Juice Bar</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>6.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20245</th>\n",
       "      <td>#1 GARDEN CHINESE</td>\n",
       "      <td>1</td>\n",
       "      <td>27</td>\n",
       "      <td>27.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20246</th>\n",
       "      <td>#1 Chinese Restaurant</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>20247 rows Ã— 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                  dba  NumLoc  NumViol  \\\n",
       "0                      DUNKIN' DONUTS     410     4247   \n",
       "1                              SUBWAY     352     3729   \n",
       "2                           STARBUCKS     281     2130   \n",
       "3                          MCDONALD'S     206     2778   \n",
       "4      DUNKIN' DONUTS, BASKIN ROBBINS     110     1462   \n",
       "...                               ...     ...      ...   \n",
       "20242                        $1 PIZZA       1        8   \n",
       "20243      #1 SABOR LATINO RESTAURANT       1       55   \n",
       "20244            #1 Natural Juice Bar       1        6   \n",
       "20245               #1 GARDEN CHINESE       1       27   \n",
       "20246           #1 Chinese Restaurant       1        3   \n",
       "\n",
       "       Avg violations per location  \n",
       "0                        10.358537  \n",
       "1                        10.593750  \n",
       "2                         7.580071  \n",
       "3                        13.485437  \n",
       "4                        13.290909  \n",
       "...                            ...  \n",
       "20242                     8.000000  \n",
       "20243                    55.000000  \n",
       "20244                     6.000000  \n",
       "20245                    27.000000  \n",
       "20246                     3.000000  \n",
       "\n",
       "[20247 rows x 4 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sql5 = \"\"\"\n",
    "SELECT dba, COUNT(camis) AS NumLoc, SUM(viol_count) AS NumViol,\n",
    "  SUM(viol_count) / CAST(COUNT(camis) AS float) AS \"Avg violations per location\"\n",
    "FROM (\n",
    "  SELECT dba, camis, COUNT(*) AS viol_count\n",
    "  FROM tRest\n",
    "  JOIN tInsp USING (camis)\n",
    "  GROUP BY dba, camis\n",
    ") \n",
    "GROUP BY dba\n",
    "ORDER BY NumLoc DESC\n",
    ";\"\"\"\n",
    "pd.read_sql(sql5,conn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "4e33a71f-c8be-489e-ab62-4d72528573bc",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "my_sql['q5']['sql'] = sql5"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6a0d4683-c82f-4a47-9ca4-a537e65ecfbd",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "6) For restaurants (by DBA) with only a single location (i.e., DBA with exactly 1 associated CAMIS) and more than 10 total violations, what is their top violation, and how many times have they been cited for it?\n",
    "\n",
    "Note that a restaurant might have been cited 1 time each for 10 different types of violations, and 2 times for another violation. That would be 12 total violations, which counts as more than 10.\n",
    "\n",
    "**Limit your results** to cases where their top violation occurred greater than or equal to 15 times.\n",
    "\n",
    "Have your query return:\n",
    "\n",
    "- camis\n",
    "- dba\n",
    "- viol_desc\n",
    "- number of violations\n",
    "\n",
    "Order your results by number of violations, descending."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "45fe92bc-5ecd-44b2-8219-0cab06d4683a",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>camis</th>\n",
       "      <th>dba</th>\n",
       "      <th>viol_desc</th>\n",
       "      <th>NumViol</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>40861669</td>\n",
       "      <td>NEW VICTORY RESTAURANT</td>\n",
       "      <td>Facility not vermin proof. Harborage or condit...</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      camis                     dba  \\\n",
       "0  40861669  NEW VICTORY RESTAURANT   \n",
       "\n",
       "                                           viol_desc  NumViol  \n",
       "0  Facility not vermin proof. Harborage or condit...       15  "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sql6 = '''\n",
    "WITH SingleRest AS \n",
    "(\n",
    "    SELECT camis, dba, viol_desc, COUNT(*) as NumViol,\n",
    "        ROW_NUMBER() OVER (PARTITION BY camis ORDER BY COUNT(*) DESC) as rn\n",
    "    FROM tRest\n",
    "    JOIN tINSP USING(camis)\n",
    "    JOIN tViol USING(viol_id)\n",
    "    GROUP BY camis, dba, viol_desc\n",
    "    HAVING COUNT(DISTINCT camis) = 1 \n",
    ") \n",
    "\n",
    "SELECT camis, dba, viol_desc, NumViol\n",
    "FROM SingleRest\n",
    "WHERE camis in \n",
    "(\n",
    "    SELECT camis\n",
    "    FROM SingleRest\n",
    "    GROUP BY camis\n",
    "    HAVING SUM(NumViol) > 10\n",
    ")\n",
    "    AND rn = 1 AND NumViol >= 15\n",
    "ORDER BY NumViol DESC\n",
    ";'''\n",
    "\n",
    "pd.read_sql(sql6, conn)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "792a0137-0152-4040-8792-5f70f3aaef1b",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "my_sql['q6']['sql'] = sql6"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "25fad292-674b-4c0e-9b25-fd51260b298c",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "7) Considering all possible combinations of violation/action, how many of those combinations **do not occur** in the data?\n",
    "\n",
    "Have your query return just the total number."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "2d128c28-34e3-4556-8e2b-18e51d7d0b44",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Missing</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>221</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Missing\n",
       "0      221"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sql7 = '''\n",
    "WITH ActCombos AS \n",
    "(\n",
    "    SELECT * \n",
    "    FROM tViol\n",
    "    CROSS JOIN tAction\n",
    "),\n",
    "ViolCombos As \n",
    "(\n",
    "    SELECT DISTINCT viol_id, action_id\n",
    "    FROM tInsp \n",
    ")\n",
    "SELECT COUNT(*) AS Missing\n",
    "FROM ActCombos \n",
    "LEFT JOIN ViolCombos\n",
    "On ActCombos.viol_id = ViolCombos.viol_id \n",
    "    AND ActCombos.action_id = ViolCombos.action_id\n",
    "WHERE ViolCombos.viol_id IS NULL AND ViolCombos.action_id IS NULL \n",
    ";'''\n",
    "\n",
    "pd.read_sql(sql7, conn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "a9b4af76-bf3f-4cf5-b384-83cd6caed247",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "my_sql['q7']['sql'] = sql7"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7103b3d8-4afe-4440-b29b-24098dbfe07f",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "8) Return the action and violation descriptions associated with the previous question.\n",
    "\n",
    "Have your query return:\n",
    "\n",
    "- action_desc\n",
    "- viol_desc\n",
    "\n",
    "Order your results in ascending order by viol_desc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "8c759584-032c-4e86-a7dc-1581a7e7f096",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>action_desc</th>\n",
       "      <th>viol_desc</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Establishment Closed by DOHMH.  Violations wer...</td>\n",
       "      <td>''''No Smoking\u001a and/or 'Smoking Permitted\u001a sig...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Establishment re-closed by DOHMH</td>\n",
       "      <td>''''No Smoking\u001a and/or 'Smoking Permitted\u001a sig...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Establishment re-opened by DOHMH</td>\n",
       "      <td>''''No Smoking\u001a and/or 'Smoking Permitted\u001a sig...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Establishment re-closed by DOHMH</td>\n",
       "      <td>''''Wash hands\u001a sign not posted at hand wash f...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>No violations were recorded at the time of thi...</td>\n",
       "      <td>''''Wash hands\u001a sign not posted at hand wash f...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>216</th>\n",
       "      <td>Establishment re-closed by DOHMH</td>\n",
       "      <td>Whole frozen poultry or poultry breasts, other...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>217</th>\n",
       "      <td>Establishment re-opened by DOHMH</td>\n",
       "      <td>Whole frozen poultry or poultry breasts, other...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>218</th>\n",
       "      <td>No violations were recorded at the time of thi...</td>\n",
       "      <td>Whole frozen poultry or poultry breasts, other...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>219</th>\n",
       "      <td>Establishment re-closed by DOHMH</td>\n",
       "      <td>Wiping cloths soiled or not stored in sanitizi...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>220</th>\n",
       "      <td>No violations were recorded at the time of thi...</td>\n",
       "      <td>Wiping cloths soiled or not stored in sanitizi...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>221 rows Ã— 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                           action_desc  \\\n",
       "0    Establishment Closed by DOHMH.  Violations wer...   \n",
       "1                     Establishment re-closed by DOHMH   \n",
       "2                     Establishment re-opened by DOHMH   \n",
       "3                     Establishment re-closed by DOHMH   \n",
       "4    No violations were recorded at the time of thi...   \n",
       "..                                                 ...   \n",
       "216                   Establishment re-closed by DOHMH   \n",
       "217                   Establishment re-opened by DOHMH   \n",
       "218  No violations were recorded at the time of thi...   \n",
       "219                   Establishment re-closed by DOHMH   \n",
       "220  No violations were recorded at the time of thi...   \n",
       "\n",
       "                                             viol_desc  \n",
       "0    ''''No Smoking\u001a and/or 'Smoking Permitted\u001a sig...  \n",
       "1    ''''No Smoking\u001a and/or 'Smoking Permitted\u001a sig...  \n",
       "2    ''''No Smoking\u001a and/or 'Smoking Permitted\u001a sig...  \n",
       "3    ''''Wash hands\u001a sign not posted at hand wash f...  \n",
       "4    ''''Wash hands\u001a sign not posted at hand wash f...  \n",
       "..                                                 ...  \n",
       "216  Whole frozen poultry or poultry breasts, other...  \n",
       "217  Whole frozen poultry or poultry breasts, other...  \n",
       "218  Whole frozen poultry or poultry breasts, other...  \n",
       "219  Wiping cloths soiled or not stored in sanitizi...  \n",
       "220  Wiping cloths soiled or not stored in sanitizi...  \n",
       "\n",
       "[221 rows x 2 columns]"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sql8 = '''\n",
    "WITH ActCombos AS \n",
    "(\n",
    "    SELECT *\n",
    "    FROM tViol \n",
    "    CROSS JOIN tAction \n",
    "),\n",
    "ViolCombos AS \n",
    "(\n",
    "    SELECT DISTINCT viol_id, action_id\n",
    "    FROM tInsp\n",
    ")\n",
    "SELECT a.action_desc, v.viol_desc\n",
    "FROM ActCombos\n",
    "LEFT JOIN ViolCombos ON ActCombos.viol_id = ViolCombos.viol_id AND ActCombos.action_id = ViolCombos.action_id\n",
    "LEFT JOIN tAction a ON ActCombos.action_id = a.action_id\n",
    "LEFT JOIN tViol v ON ActCombos.viol_id = v.viol_id\n",
    "WHERE ViolCombos.viol_id IS NULL AND ViolCombos.action_id IS NULL\n",
    "GROUP BY a.action_desc, v.viol_desc\n",
    "ORDER BY v.viol_desc ASC\n",
    ";'''\n",
    "\n",
    "pd.read_sql(sql8, conn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "60d43fd8-e91b-4f3c-a477-2273244eff45",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "my_sql['q8']['sql'] = sql8"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0af424a9-dc6c-43ea-bd76-7b268990589a",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "9) For all restaurants (by camis) that have been cited for 90 or more violations, what is their top violation?\n",
    "\n",
    "Have your query return:\n",
    "- camis\n",
    "- dba\n",
    "- viol_id\n",
    "- viol_desc\n",
    "- Number of violations (for the top violation only)\n",
    "\n",
    "Order the results in ascending order by dba\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "ef80152a-5a56-4b54-8767-d6f3fb7222d2",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>camis</th>\n",
       "      <th>dba</th>\n",
       "      <th>viol_id</th>\n",
       "      <th>viol_desc</th>\n",
       "      <th>ViolationCount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>50001880</td>\n",
       "      <td>GANG SAN DEUL</td>\n",
       "      <td>02B</td>\n",
       "      <td>Hot food item not held at or above 140Ã‚Âº F.</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>40965177</td>\n",
       "      <td>LA GATA GOLOSA #2</td>\n",
       "      <td>06C</td>\n",
       "      <td>Food not protected from potential source of co...</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>41683816</td>\n",
       "      <td>MAX BAKERY &amp; RESTAURANT</td>\n",
       "      <td>04M</td>\n",
       "      <td>Live roaches present in facility's food and/or...</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>50033122</td>\n",
       "      <td>PARTY WELL REST &amp; ORIENTAL BAKERY</td>\n",
       "      <td>08A</td>\n",
       "      <td>Facility not vermin proof. Harborage or condit...</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>41459659</td>\n",
       "      <td>T. K. KITCHEN</td>\n",
       "      <td>08A</td>\n",
       "      <td>Facility not vermin proof. Harborage or condit...</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      camis                                dba viol_id  \\\n",
       "0  50001880                      GANG SAN DEUL     02B   \n",
       "1  40965177                  LA GATA GOLOSA #2     06C   \n",
       "2  41683816            MAX BAKERY & RESTAURANT     04M   \n",
       "3  50033122  PARTY WELL REST & ORIENTAL BAKERY     08A   \n",
       "4  41459659                      T. K. KITCHEN     08A   \n",
       "\n",
       "                                           viol_desc  ViolationCount  \n",
       "0        Hot food item not held at or above 140Ã‚Âº F.              10  \n",
       "1  Food not protected from potential source of co...               8  \n",
       "2  Live roaches present in facility's food and/or...              12  \n",
       "3  Facility not vermin proof. Harborage or condit...              14  \n",
       "4  Facility not vermin proof. Harborage or condit...              13  "
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sql9 = '''\n",
    "WITH MoreThan90 AS (\n",
    "    SELECT camis, dba, COUNT(*) AS NumViol\n",
    "    FROM tRest\n",
    "    JOIN tInsp USING (camis)\n",
    "    JOIN tViol USING (viol_id)\n",
    "    GROUP BY camis\n",
    "    HAVING NumViol >= 90\n",
    "),\n",
    "TopViolations AS (\n",
    "    SELECT m.camis, m.dba, viol_id, viol_desc, COUNT(*) as ViolationCount,\n",
    "           ROW_NUMBER() OVER (PARTITION BY m.camis ORDER BY COUNT(*) DESC) AS rn\n",
    "    FROM MoreThan90 m\n",
    "    JOIN tInsp USING(camis)\n",
    "    JOIN tViol USING (viol_id)\n",
    "    GROUP BY m.camis, viol_id, viol_desc\n",
    ")\n",
    "SELECT camis, dba, viol_id, viol_desc, ViolationCount\n",
    "FROM TopViolations\n",
    "WHERE rn = 1\n",
    "ORDER BY dba ASC\n",
    "\n",
    ";'''\n",
    "\n",
    "pd.read_sql(sql9, conn)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "7f0f3853-306e-49f5-9e93-544d7f869045",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "my_sql['q9']['sql'] = sql9"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "cc5f8516-badd-4c38-90bc-85cff199cd25",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "with open('midterm.data302', 'w') as f:\n",
    "    json.dump(my_sql, f)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "ae50929e-abe3-47ec-b28b-abf4e18ed504",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/jovyan/Databases/databases/dbga.py:1119: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n",
      "  ).applymap(lambda y: y[:max_str_len] if isinstance(y, str) else y)\n",
      "/home/jovyan/Databases/databases/dbga.py:1123: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n",
      "  ).applymap(lambda y: y[:max_str_len] if isinstance(y, str) else y)\n",
      "/home/jovyan/Databases/databases/dbga.py:1119: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n",
      "  ).applymap(lambda y: y[:max_str_len] if isinstance(y, str) else y)\n",
      "/home/jovyan/Databases/databases/dbga.py:1123: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n",
      "  ).applymap(lambda y: y[:max_str_len] if isinstance(y, str) else y)\n",
      "/home/jovyan/Databases/databases/dbga.py:1132: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n",
      "  ).applymap(lambda y: y[:max_str_len] if isinstance(y, str) else y).to_string(index=False)\n",
      "/home/jovyan/Databases/databases/dbga.py:1119: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n",
      "  ).applymap(lambda y: y[:max_str_len] if isinstance(y, str) else y)\n",
      "/home/jovyan/Databases/databases/dbga.py:1123: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n",
      "  ).applymap(lambda y: y[:max_str_len] if isinstance(y, str) else y)\n",
      "/home/jovyan/Databases/databases/dbga.py:1119: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n",
      "  ).applymap(lambda y: y[:max_str_len] if isinstance(y, str) else y)\n",
      "/home/jovyan/Databases/databases/dbga.py:1123: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n",
      "  ).applymap(lambda y: y[:max_str_len] if isinstance(y, str) else y)\n",
      "/home/jovyan/Databases/databases/dbga.py:1132: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n",
      "  ).applymap(lambda y: y[:max_str_len] if isinstance(y, str) else y).to_string(index=False)\n",
      "/home/jovyan/Databases/databases/dbga.py:1132: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n",
      "  ).applymap(lambda y: y[:max_str_len] if isinstance(y, str) else y).to_string(index=False)\n",
      "/home/jovyan/Databases/databases/dbga.py:1119: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n",
      "  ).applymap(lambda y: y[:max_str_len] if isinstance(y, str) else y)\n",
      "/home/jovyan/Databases/databases/dbga.py:1123: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n",
      "  ).applymap(lambda y: y[:max_str_len] if isinstance(y, str) else y)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Report saved to:  VALIDATION_midterm.txt\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/jovyan/Databases/databases/dbga.py:1132: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n",
      "  ).applymap(lambda y: y[:max_str_len] if isinstance(y, str) else y).to_string(index=False)\n"
     ]
    }
   ],
   "source": [
    "dbga.validate_submission_format(path_to_db,\n",
    "                                path_submission = 'midterm.data302',\n",
    "                                num_questions = 9)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a057c4bd-dd95-4020-804d-cefa9777a2df",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "97eefc76-cd75-4570-bb6d-58d706b5cfbf",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<function Connection.close()>"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "conn.close"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f90f14f9-3043-4f56-ac1f-4708c40b4403",
   "metadata": {
    "tags": []
   },
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2bf2566d-fee8-4f86-aba7-2ee6af57e547",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
